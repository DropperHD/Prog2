/**
 * @author Andreas Franz-Josef Ramsauer
 */
package com.company;
import java.util.Objects;

/**
 * Charakterklasse
 * moddeliert einzelene Charaktere aus Game of thrones
 *
 */
public class Character {

    private final String name; //Name des Charakters  darf nicht null oder leer sein
    private final House house; //Haus des Charakters  darf null sein
    private final Character mother; //Mutter darf null sein
    private final Character father; //Vater darf null sein
    private boolean alive; //Lebendig Ja/Nein muss festgelegt werden. Kann geändert werden
    private final int fightSkills; //Kampfgeschick wobei 0 das schlechteste und 100 das beste

    /**
     * Erstellt einen neuen Chrakter mit Name, Haus, ob er lebendig ist und seinem Fightskill
     * @param n Name Darf nicht {@code null} sein
     * @param h Haus Darf nicht {@code null} sein @see
     * @param a Lebendig Darf nicht {@code null} sein
     * @param fs Fightskill Darf nicht {@code null} sein. Muss zwischen 0 und hundert sein
     */
    public Character(String n, House h, boolean a, int fs) {
        if(n == null){
            throw new IllegalArgumentException("Parameter name darf nicht null sein.");
        }
        if(n.isEmpty()){ // n darf nicht "" sein
            throw new IllegalArgumentException("Parameter name darf nicht leer sein.");
        }
        if(fs <0 || fs > 100){ //fightskill muss zwischen 0 und 100 sein
            throw new IllegalArgumentException("Parameter fightskill muss zwischen 100 und 0 sein sein.");
        }
        name = n;      //hier wird der dem Konstruktor übergebene Parameter an die Attribute des neuen
        house = h;     //Charakters übergeben.
        mother = null; //In diesem Konstruktor wird Mutter und Vater nicht festgelegt. daher müssen diese mit null
        father = null; //initialisiert werden
        alive = a;
        fightSkills = fs;
    }

    /**
     * lässt ein Kind von zwei Elten entstehen. Haus wird von der Mutter vererbt.
     * Fightskill ist der Durchschnitt der Eltern.
     * @param n Name Darf nicht {@code null} sein
     * @param f Mutter Darf nicht {@code null} sein
     * @param m Vater Darf nicht {@code null} sein
     */

    public Character(String n, Character m, Character f) {
        if(n == null){
            throw new IllegalArgumentException("Parameter name darf nicht null sein.");                             //Hier werden die Arguments überprüft
        }                                                                                                           //der Name darf nicht null oder empty sein
        if(n.equals("")){ //Da ein leerer String sich von null unterscheidet müssen beide Fälle geprüft werden      //m und f dürfen nicht null oder gleich sein
            throw new IllegalArgumentException("Parameter name darf nicht leer sein.");                             //und beide müssen Leben
        }
        if(f == null){
            throw new IllegalArgumentException("Parameter father darf nicht null sein.");
        }
        if(m == null){
            throw new IllegalArgumentException("Parameter mother darf nicht null sein.");
        }
        if(!m.getAlive() || !f.getAlive()){ //Beide Eltern müssen Leben
            throw new IllegalArgumentException("Beide Eltern müssen leben.");
        }
        if(m.equals(f)){
            throw new IllegalArgumentException("Es kann nicht eine Person Vater und Mutter gleichzeitig sein.");
        }
        name = n;
        if(m.getHouse() != null) {
            house = m.getHouse();                                                             //Das Kind ist dem Haus der Mutter angehörig
        } else {
            house = f.getHouse();                                                             //falls die Mutter kein Haus hat wird das vom Vater genommen
        }
        father = f;
        mother = m;
        alive = true; //Kind ist immer lebendig bei der Geburt

        fightSkills = (int) Math.round((f.getFightSkills()*1.0+m.getFightSkills()*1.0)/2.0); //Fightskill wird hier berechnet indem man den Durschnitt
    }                                                                                        //durch 2 Teilt. Da es zwei Int Werte sind muss man zuerst in double runden und dann zurück
                                                                                             //casten. sonst sind die Werte falsch

    /**
     * Klont einen Charakter
     * @param other Charakter der geklont werden soll.Darf nicht {@code null} sein
     */
    public Character(Character other){
        if(other == null){ //null kann man nicht kopieren
            throw new IllegalArgumentException("Parameter xyz darf nicht null sein.");
        }
        name = other.getName(); //Hier wird ein neuer Charakter erstellt und die Attribute des Alten übernommen
        house = other.getHouse();
        father = other.getFather();
        mother = other.getMother();
        alive = other.getAlive();
        fightSkills = other.getFightSkills();
    }

    /**
     * lässt zwei Charaktere kämpfen.
     * Der mit weniger Fightskill stirbt
     * Bei Gleichstand überleben beide
     * @param other Charakter gegen den gekämpft werden soll. Darf nicht {@code null} sein
     */
    public void fight(Character other){
        if(other == null){ //other darf nicht null sein
            throw new IllegalArgumentException("Zum kämpfen braucht es einen Gegner!");
        }
        if(other.equals(this)){ //this und other dürfen nicht das selbe sein
            throw new IllegalArgumentException("Kann nicht gegen sich selber kämpfen!");
        }
        if(!this.getAlive() || !other.getAlive()){ //beide müssen Leben
            throw new IllegalArgumentException("Tote können nicht kämpfen!");
        }
        if(this.getFightSkills() > other.getFightSkills()){ //falls  der Fightskill von other kleiner ist stirbt other
            other.setAlive(false);
        }
        if (this.getFightSkills() < other.getFightSkills()){ //bei gleichem fightskill werden die ifs übersprungen
            this.setAlive(false);                            //da der case this = other nicht bei < und > dabei ist
        }
    }


    public String getName() {
        return name;
    } //Getter "getten" die Attribute und machen sie für andere Klassen sichtbar

    public House getHouse() {
        return house;
    }

    public Character getMother() {
        return mother;
    }

    public Character getFather() {
        return father;
    }

    public boolean getAlive() {
        return alive;
    }

    public void setAlive(boolean alive) {//Alive ist das einzig veränderbare
        this.alive = alive;              //Attribut deshalb hat es als einziges einen Setter
    }

    public int getFightSkills() {
        return fightSkills;
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, house, mother, father, alive, fightSkills);
    }

    @Override
    public boolean equals(Object o) {
        if(this == o){  //bei this == true wird geschaut ob es sich um das selbe Object handelt.
            return true; //in dem fall wär es sogar genau das selbe,da die referencen auf den selben Platz im spiecher zeigen ähnlich wie Pointer in C
        }
        if(o == null){ //ein erzeugtes Object kann nicht gleich mit null sein daher false
            return false;
        }
        if(this.getClass() != o.getClass() ){ //O muss die selbe Klasse haben wie This
            return false;
        }
        Character other = (Character) o; //Falls es die selbe Klasse ist kann ein Typcast durchgeführt werden um auf die Funktionen zugreifen zu können
        if(!this.name.equals(other.getName())){ //jetzt werden alle Attribute durchgegangen und auf Gleichheit überprüft
            return false;                       //Es werden die Getter benutzt da die Attribute von o private sind
        }
        if(!(this.father == null ) && other.getFather() == null){ //Hier muss man aufpassen da, this.equals(o.father) ein Nullpointer geben könnte
            return false;
        }
        if(this.father == null && !(other.getFather() == null)) { //Deshalb wird einmal geschaut ob beide Väter null sind,dann jeweils einzeln
            return false;
        }
        if(this.father != null && other.father != null) { //Falls beide Charakter einen Vater haben,wird geschaut ob es sich um den selben handelt
            if (!this.father.equals(other.getFather())) {
                return false;
            }
        }
        if(!(this.mother == null ) && other.getMother() == mother){ //bei den Müttern genau das gleiche
            return false;
        }
        if(this.mother == null && !(other.getMother() == null)) {
            return false;
        }
        if(this.mother != null && other.mother != null) {
            if (!this.mother.equals(other.getMother())) {
                return false;
            }
        }
        if(!this.house.equals(other.getHouse())){ //
            return false;
        }
        if(this.fightSkills != other.getFightSkills()) //fightskills müssen auch identisch sein
        {
            return false;
        }
        return this.alive == other.getAlive(); //genauso wie alive
    }

    @Override
    public String toString() {
        String string;                //anfangs wird ein String deklariert der später zur fertigen Ausgabe zusammenaddiert wird

         string =   "Character{" +    "name='" + name + '\'' + "," ; //Einen Namen muss er haben also kann der einfach genommen werden
         if(house != null){                                          //Haus darf null sein,falls der Character keins hat wird es einfach weggelassen
             string = string + " house=" + house.getName();
         }
        if(mother != null){ //Bei Mutter und Vater das selbe
            string = string + ", mother="+ this.mother.getName();
        }
        if (father != null) {
            string = string + ", father=" + father.name;
        }

        string = string + ", alive=" + alive + ", fightSkills=" + fightSkills + '}'; //alive und fightskill machen auch keine Probleme

        return string;           //am Schluss wird der ganze String nun zurückgegeben
    }
}
